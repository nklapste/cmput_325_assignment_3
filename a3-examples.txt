Here are some examples of queries and expected answers for assignment 3
The examples show all the answers generated by backtracking when
repeatedly pressing ";".
As an alternative, you can also use findall to generate all solutions in order,
as discussed in class.

#1 alternate
?- alternate([1,2,3], [a,b,c], R).
R = [1, a, 2, b, 3, c] ;
false.
?- alternate([1,2], [a,b,c], R).
R = [1, a, 2, b, c] ;
false.
?- alternate([1], [a,b,c], R).
R = [1, a, b, c] ;
false.
?- alternate([], [], R).
R = [] ;
false.
?- alternate([a,b,c],[1,2,3],X).
X = [a, 1, b, 2, c, 3] ;
false.
?- alternate([a,b,c], [1,2,3], [a, 1, b, 2, c, 3]).
true ;
false.

Just for fun (this will not be tested by us), you can try with only
the third argument instantiated:
?- alternate(X,Y,[a,b,c,d]).
X = [a, b, c, d],
Y = [] ;
X = [],
Y = [a, b, c, d] ;
X = [a, c, d],
Y = [b] ;
X = [a],
Y = [b, c, d] ;
X = [a, c],
Y = [b, d] ;
X = [a, c],
Y = [b, d] ;
false.

You may get a different order of the same solutions, depending on how you implement things.
You can use setof to sort/normalize results.
?- setof((X,Y), alternate(X,Y,[a,b,c,d]), Set).
Set = [([], [a, b, c, d]),  ([a], [b, c, d]),  ([a, b, c, d], []),
    ([a, c], [b, d]),  ([a, c, d], [b])].
However, setof does remove duplicate solutions so it does not show the whole
truth.

#2 counti
?- counti([], N).
N = 0 ;
false.
?- counti([], 0).
true ;
false.
?- counti([1,2,3], N).
N = 3 ;
false.
?- counti([[2],[1,2,3,4,5,6],2,[2,3],[1],2,7], N).
N = 13 ;
false.
?- counti([[1,2,[[[[3]]]],4,5],[6,7,8],[9,10,11],12,[3],4],N).
N = 14 ;
false.
?- counti([[1,2,2],[6,1,[],[[4]]],5,[8,1],[6,[5,[4]],12],7,1,3,6], N).
N = 17 ;
false.
?- counti([k,[2],a,[a,d,1,b,2,v,c,3,4,5,c,v,x,s,6],2,a,d,[2,3,d,x],[d,d,1],2,f,7],N).
N = 13 ;
false.
?- counti([[1,2,3,a,f,v,4,t,5],[r,6,7,q,8],[9,10,e,e,11],12,f,[13,d],14],N).
N = 14 ;
false.
?- counti([[1,2,2,f,d,h],[6,1,[f],d,s,[[4]]],5,g,[8,1],[6,d,[5,[4]],d,12],7,1,r,3,t,6],N).
N = 17 ;
false.


#3 umem

?-umem(X, []).
false.
?-umem(X, [a,a,b]).
X = a ;
X = b ;
false.
?- umem(X,[a,b,c,a,d,c,b,a,e,f]).
X = a ;
X = b ;
X = c ;
X = d ;
X = e ;
X = f ;
false.

#4 MORE EXAMPLES TO BE POSTED LATER.

#4.1 required
[a3_miniDB].
required(cmput325, L).
L = [cmput175,cmput204] ;
false

#4.2 can_take
can_take([cmput175], C).

C = cmput201 ;
C = cmput204 ;
false
NOTE: your order of solutions can be different.

#4.3 in_cycle
[a3_mini_cycleDB].

?- in_cycle(cmput325, Cycle).
Cycle = [cmput325, cmput175, cmput204, cmput325]

?- in_cycle(cmput175, Cycle).
Cycle = [cmput175, cmput204, cmput325, cmput175]

?- in_cycle(cmput204, Cycle).
Cycle = [cmput204, cmput325, cmput175, cmput204]

?- in_cycle(cmput201, Cycle).
false.
